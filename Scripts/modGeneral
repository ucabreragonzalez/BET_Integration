#!/bin/bash
#-----------------------------------------------------------
#   Autor       : ucabrera
#   Date        : 18/01/2020
#-----------------------------------------------------------
source ./varGeneral

#-----------------------------------------------------------
#   Function    : FileExist
#   Date        : 02/08/2015
#   Objetive    : Validate whether a file exists.
#   Parameters  : strFile       : Path of the file to Validate
#
#   Exaple      : variable=$(FileExist "path/to/the/file")
#-----------------------------------------------------------
FileExist()
{
    local strFile="$1"

    if [ -f "$strFile" ]; then
        echo true
    else
        echo false
    fi
}

#-----------------------------------------------------------
#   Function    : FileExistDelete
#   Date        : 02/08/2015
#   Objetive    : If the file exists delete it.
#   Parameters  : strFile       : Path of the file to Validate
#
#   Exaple      : FileExistDelete "path/to/the/file"
#-----------------------------------------------------------
FileExistDelete()
{
    local strFile="$1"

    if [ $(FileExist "$strFile") = true ]; then
        rm "$strFile"
    fi
}

#-----------------------------------------------------------
#   Function    : FolderExist
#   Date        : 02/08/2015
#   Objetive    : Validate whether a folder exists.
#   Parameters  : strFolder      : Path of the file to Validate
#
#   Exaple      : variable=$(FolderExist "path/to/the/file")
#-----------------------------------------------------------
FolderExist() {
    local strFolder="$1"
    
    if [ -d "$strFolder" ]; then
        echo true
    else
        echo false
    fi
}

#-----------------------------------------------------------
#   Function    : FolderExistDelete
#   Date        : 02/08/2015
#   Objetive    : If the folder exists delete it.
#   Parameters  : strFolder      : Path of the folder.
#
#   Exaple      : FolderExistDelete "path/to/the/file"
#-----------------------------------------------------------
FolderExistDelete() {
    local strFolder="$1"

    if [ $(FolderExist "$strFolder") = true ]; then
        rm -rf "$strFolder"
    fi
}

#-----------------------------------------------------------
#   Function    : FolderExistDelete
#   Date        : 02/08/2015
#   Objetive    : Create a folder within all the path.
#   Parameters  : strFolder      : Path of the folder.
#
#   Exaple      : FolderCreate "path/to/the/folder"
#-----------------------------------------------------------
FolderCreate() {
    local strFolder="$1"

    if [ $(FolderExist "$strFolder") = false ]; then
        mkdir -p "$strFolder"
    fi
}

#-----------------------------------------------------------
#   Function    : AddIntoFile
#   Date        : 02/08/2015
#   Objetive    : Append text at the end of a file and create
#                 it if does not exists.
#   Parameters  : strFolder      : Path to the file.
#                 strText        : Text to being inserted.
#
#   Exaple      : AddIntoFile "path/to/the/file" "Text to insert"
#-----------------------------------------------------------
AddIntoFile()
{
    local strFile="$1"
    local strText="$2"

    echo "$strText" >> $strFile
}

#-----------------------------------------------------------
#   Function    : GetFileName
#   Date        : 02/08/2015
#   Objetive    : Return the Name of a File/Path
#   Parameters  : FileName          : Name or Path to the File
#
#   Exaple      : GetFileName "Name/Path/of/FileName.extension"
#-----------------------------------------------------------
GetFileName()
{
    local strFileName="$1"
    if [ "$strFileName" != "" ];then
        echo "$(basename "$strFileName")"
    else
        echo ""
    fi
}

#-----------------------------------------------------------
#   Function    : ReplaceString
#   Date        : 02/08/2015
#   Objetive    : If the text is null or nothing then return a default value
#   Parameters  : OriginalTxt       : Original text
#                 FindTxt           : Text to search into the original
#                 ReplaceWithTxt    : Text to being inserted instead.
#
#   Exaple      : ReplaceString "OriginalTxt" "FindTxt" "ReplaceWithTxt"
#-----------------------------------------------------------
ReplaceString()
{
    local strOriginalTxt="$1"
    local strFindTxt="$2"
    local strReplaceWithTxt="$3"

    echo "${strOriginalTxt//$strFindTxt/$strReplaceWithTxt}"
}

#-----------------------------------------------------------
#   Function    : Right
#   Date        : 02/08/2015
#   Objetive    : Return all the characters at the rigth until the positions number.
#   Parameters  : strText           : Original text
#                 intPositions      : Positions to return.
#
#   Exaple      : Right "Text" Positions
#-----------------------------------------------------------
Right()
{
    local strText="$1"
    local intPositions=$2
    if [ "$strText" != "" ];then
        echo ${strText:(-$intPositions)}
    else
        echo ""
    fi
}

#-----------------------------------------------------------
#   Function    : Left
#   Date        : 02/08/2015
#   Objetive    : Return all the characters at the left until the positions number.
#   Parameters  : strText           : Original text
#                 intPositions      : Positions to return.
#
#   Exaple      : Left "Text" Positions
#-----------------------------------------------------------
Left()
{
    local strText="$1"
    local intPositions=$2
    if [ "$strText" != "" ];then
        echo ${strText:0:$intPositions}
    else
        echo ""
    fi
}

#-----------------------------------------------------------
#   Function    : SplitString
#   Date        : 02/08/2015
#   Objetive    : To update the system..
#   Parameters  : String        : String to being separated
#                 Separator     : Character or string that saparates the Original String
#                 VariableToReturn : Name of a variable to store the results
#                 VariableCount : Name of a variable to store the number of results
#
#   Exaple      : SplitString "String" "Separator" "VariableToReturn" "(opt) VariableCount"
#-----------------------------------------------------------
SplitString()
{
    local strString="$1"
    local strSeparator="$2"
    local strVarName="$3"
    local strVarCount="$4"
    local OIFS=$IFS

    local arrayResult

    IFS=$strSeparator
    arrayResult=(${strString})

    eval $strVarName='(${arrayResult[*]})'

    if [ "$strVarCount" != "" ]; then
        eval $strVarCount='${#arrayResult[*]}'
    fi

    IFS=$OIFS
}

#-----------------------------------------------------------
#   Function    : JoinArray
#   JoinArray "," "${varArray[@]}"
#-----------------------------------------------------------
JoinArray()
{
    local strSeparator="$1"
    shift
    local strArray=("$@")
    local OIFS=$IFS

    IFS="$strSeparator"
    echo "${strArray[*]}"

    IFS=$OIFS
}

#-----------------------------------------------------------
#   Function    : SendTelegramMessage
#-----------------------------------------------------------
SendTelegramMessage()
{
    local strChatId="$1"
    local strMessageText="$2"
    local strAttachmentPath="$3"

    if [ "$strAttachmentPath" == "" ]; then
        curl -s -X POST "$VAR_TELEGRAM_MESSAGE_URL" -F chat_id="$strChatId" -F text="$strMessageText" > /dev/null
    else
        curl -s -X POST "$VAR_TELEGRAM_ATTACHMENT_URL" -F chat_id="$strChatId" -F caption="$strMessageText" -F document=@"$strAttachmentPath" > /dev/null
    fi
}

#-----------------------------------------------------------
#   Function    : ColumnExists
#-----------------------------------------------------------
ColumnExists()
{
    local strFile="$1"
    local strColumn="$2"

    local iCount=$(csvcut -n "$strFile" | grep -c -w "$strColumn")

    if [ $iCount -eq 0 ]; then
        echo false
    else
        echo true
    fi
}

#-----------------------------------------------------------
#   Function    : CopyFileColumns
#   CopyFileColumns "$VAR_SOURCE" "$VAR_TARGET" "Div,Date,HomeTeam,AwayTeam,Referee"
#   https://csvkit.readthedocs.io/en/latest/
#   sudo dnf install python3-csvkit
#   sudo apt install csvkit <= for PI
#-----------------------------------------------------------
CopyFileColumns()
{
    local strFileSource="$1"
    local strFileTarget="$2"
    local strColumns="$3"

    local strTempFile1=$(mktemp)
    local strTempFile2=$(mktemp)

    local bFoundLookup=false

    # get an array with the columns in the list
    SplitString $strColumns "," arrColumns

    # per each column in the list
    for Col in ${arrColumns[*]}; do
        # is a lookup one? within {}?
        if [[ "$Col" == {*} ]]; then
            bFoundLookup=false
            tmpCol=$(ReplaceString "$Col" "{" "")
            tmpCol=$(ReplaceString "$tmpCol" "}" "")
            SplitString $tmpCol "|" arrLookupColumns

            for LookupCol in ${arrLookupColumns[*]}; do
                if [ $(ColumnExists "$strFileSource" "$LookupCol") == true ]; then
                    bFoundLookup=true
                    break
                fi
            done

            if [ $bFoundLookup == true ]; then
                strExist+=( "$LookupCol" )
            else
                strDontExist+=( "$LookupCol" )
            fi
            
            # Found it or not we need to replace from original list
            strColumns=$(ReplaceString "$strColumns" "$Col" "$LookupCol")
        else
        # then is a normal one
            if [ $(ColumnExists "$strFileSource" "$Col") == true ]; then
                strExist+=( "$Col" )
            else
                strDontExist+=( "$Col" )
            fi
        fi
    done

    # Just in case, delete old file
    FileExistDelete "$strFileTarget"

    # If all columns exist in source
    if [ "${#strDontExist[*]}" -eq "0" ]; then
        csvcut -c "$strColumns" "$strFileSource" > "$strFileTarget"
    else
    # If not all columns exist
        csvcut -c "$(JoinArray "," "${strExist[@]}")" "$strFileSource" > "$strTempFile1"
        echo "$(JoinArray "," "${strDontExist[@]}")" | csvjoin --no-inference "$strTempFile1" -> "$strTempFile2"

        csvcut -c "$strColumns" "$strTempFile2" > "$strFileTarget"
    fi
}
